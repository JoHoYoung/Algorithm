//문제 1932 계단 오르기
//계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다. <그림 1>과 같이
// 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.
//
//예를 들어 <그림 2>와 같이 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째,
// 계단을 밟아 도착점에 도달하면 총 점수는 10 + 20 + 25 + 20 = 75점이 된다.
//계단 오르는 데는 다음과 같은 규칙이 있다.
//
//계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나,
// 다음 다음 계단으로 오를 수 있다.
//연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
//마지막 도착 계단은 반드시 밟아야 한다.
//따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다.
// 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째,
// 세번째 계단을 연속해서 모두 밟을 수는 없다.
//
//각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최대값을 구하는 프로그램을 작성하시오.
//한칸, 두칸 갈 수 있다. 연속3개는 안된다. 시작점은 제외다.
//도착지점을 밟아야 한다.

#include<iostream>
#include<algorithm>
using namespace std;

int Stair[300];
long DP[300][3];
//DP[N][0] : N번째 계단을 안밟았을 경우
//DP[N][1] : N번째 계단이 독립된 하나의 계단을 밟은것일 경우
//DP[N][2] : N번째 계단이 두개연속인 경우 값
//DP[N][0] : ( 앞에것을 밟은 경우만 접근 가능)
//제일 큰값을 가져온다. 비교대상 : DP[N][0]=Max(DP[N-1][2], DP[N-1][1])
//DP[N][1] : 앞에 것을 안밟은 경우, 앞앞것을 밟은 경우
//DP[N][1]= Stair[N] ,DP[N-1][0]
// DP[N][2] : 앞에것을 밟은 경우 Stair[N] + DP[N-1][1]

int Max(int a,int b)
{
    if(a>b)
        return a;
    else return b;
}
int main() {

    int N;
    cin>>N;

    for(int i=0;i<N;i++)
        cin>>Stair[i];

    DP[0][0]=0;
    DP[0][1]=Stair[0];
    DP[0][2]=0;

    for(int i=1;i<N;i++)
    {
        DP[i][0]=Max(DP[i-1][1],DP[i-1][2]);
        DP[i][1]=Stair[i]+DP[i-1][0];
        DP[i][2]=Stair[i]+DP[i-1][1];

     //   cout<<DP[i-1][1]<<endl<<DP[i-1][2]<<endl;
      //  cout<<DP[i][0]<<endl;
    }

    cout<<Max(DP[N-1][1],DP[N-1][2]);

    return 0;
}